###################
# SECURING INPUT OUTPUT
# ASVS 5 : VALIDATION SANITIZATION ENCODING
# 5.1 INPUT VALIDATION
# 5.2 SANITIZATION/SANDBOXING
# 5.3 OUTPUT ENCODING / INJECTION PREVENTION
# 5.5 DESERIALIZATION PROTECTION
###################

######## INPUT VALIDATION 5.1.4 ASVS (DATA TYPE BINDING + 5.1.3 REGEX VALIDATION)
# UserController.cs, line 30, gets Guid type as parameter that's ok, try changing as string
# Show that this exposes the call to alter the URL adding some <br> at the end, it gets an exception for line 33 because # # of null, we can't use invalid data to proceed in the code

# Areas > Identity > Pages > Account > Register.cshtml.cs Line 73, property First Name
# https://learn.microsoft.com/en-us/aspnet/core/security/cross-site-scripting?view=aspnetcore-8.0#html-encoding-using-razor
# First Name field in Register form is vulnerable to XSS, register and put Timo<script>alert("XSS here!");</script> in First Name, the HTML gets honored in following pages. Add length limit and regex by decommenting
  [Display(Name = "First name")]
  //[StringLength(20, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 2)]
  //[RegularExpression(@"^[a-zA-Z'\-\s]{1,20}$", ErrorMessage = "Invalid Characters.")]
  public string FirstName { get; set; }

# At line 135 of Register.cshtml.cs, need to propagate first name
 if (_userManager.Options.SignIn.RequireConfirmedAccount)
                    {
                        return RedirectToPage("RegisterConfirmation", new { email = Input.Email,firstName = Input.FirstName, returnUrl = returnUrl });
                    }


# Register.cshtml add the corresponding First Name field
  <div class="form-floating">
      <input asp-for="Input.FirstName" class="form-control" autocomplete="First-name" aria-required="true" />
      <label asp-for="Input.FirstName"></label>
      <span asp-validation-for="Input.FirstName" class="text-danger"></span>
  </div>
# RegisterConfirmation.cshtml add the confirmation message
else
    {
<p>
        We're really happy to have you  @Model.FirstName. <br>
        Please check your email to confirm your account
</p>
    }
# //  Use @Html.Raw(@Model.FirstName) to by pass XSS protection
# Replace entire RegisterConfirmation.cshtml.cs from (6/end)

########
# SERVER SIDE CHECK FOR BYPASS
##########
# Run end/6 (only) locally in visual studio code, do a Register, Start Fiddler, Use Rules > Automatic Breakpoints > Before Request, Put in Code Breakpoint at Register.cshtml.cs line 109 (check isModelValid), Use Fiddler to intercept form and put invalid data (with HTML)in form, verify that serverside isModel check prevents hack. (debug and at breakpoint inspect ModelState > FirstName
###############

###############
# ASVS 5.1.5 URL REDIRECTS
###############
# Type in /admin/user without being logged in. You are redirect to login, but login contains ReturnUrl exposed in the URI. We can tamper this with another URL to a similar login page but on an attacker site.
# To see the attack in place, at Login.chtmls.cs line 123 replace LocalRedirect with Redirect, then put it back in place
if (result.Succeeded)
                {
                    _logger.LogInformation("User logged in.");
                    return LocalRedirect(returnUrl);   // Redirect(returnUrl)
                }
# We can also add a check on the query parameter
# if (ModelState.IsValid)
#            {
                if (!Url.IsLocalUrl(returnUrl))
                {
                    ModelState.AddModelError(string.Empty, "Invalid return URL");
                    return Page();
                }

#################
# ENCODING OUTPUT (SANITIZE SYNTAX) HttpUtility.HtmlEncode , UrlEncode, JavaScriptStringEncode...
##################
# < &lt;  > &gt; & &amp; ......
# To demonstrate an example of XSS, remove regex check on FirstName in Register.cshtml.cs
# In RegisterConfirmation.cshtml use @Html.Raw(@Model.FirstName)
# Do a Registration with some HTML scripting <script>document.body.style.color="blue"</script>
# Put it without raw to see Razor doing html encoding OOTB

# Another example to use encoding (tags in a generated email): 
# Copy Areas>Admin>Controller>UserController.cs UserController.cs from 6/end
# Copy Areas>Admin>Views>User ViewUser.cshtml from 6/end
# Areas>Admin>Controller>UserController.cs line 14 Email Body
# Line 79 activate/deactivate encoding
string htmlMessage = EmailBody
                .Replace("%%message%%", HttpUtility.HtmlEncode(message));
# Go to Admin/User, select a User, new window with send message option
# Send a message hello <script>alert('hello')</script>, see in the log that html is or is not encoded

###################
# ASVS 5.3 INJECTION PREVENTION
###################












<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE example [<!ELEMENT example ANY><!ENTITY file SYSTEM "file:///c:/ps/appsettings.json">]><example>&file;</example>
