###################
# SECURING INPUT OUTPUT
# ASVS 5 : VALIDATION SANITIZATION ENCODING
# 5.1 INPUT VALIDATION
# 5.2 SANITIZATION/SANDBOXING
# 5.3 OUTPUT ENCODING / INJECTION PREVENTION
# 5.5 DESERIALIZATION PROTECTION
###################

######## INPUT VALIDATION 5.1.4 ASVS (DATA TYPE BINDING + 5.1.3 REGEX VALIDATION)
# UserController.cs, line 30, gets Guid type as parameter that's ok, try changing as string
# Show that this exposes the call to alter the URL adding some <br> at the end, it gets an exception for line 33 because # # of null, we can't use invalid data to proceed in the code

# Areas > Identity > Pages > Account > Register.cshtml.cs Line 73, property First Name
# https://learn.microsoft.com/en-us/aspnet/core/security/cross-site-scripting?view=aspnetcore-8.0#html-encoding-using-razor
# First Name field in Register form is vulnerable to XSS, register and put Timo<script>alert("XSS here!");</script> in First Name, the HTML gets honored in following pages. Add length limit and regex by decommenting
  [Display(Name = "First name")]
  //[StringLength(20, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 2)]
  //[RegularExpression(@"^[a-zA-Z'\-\s]{1,20}$", ErrorMessage = "Invalid Characters.")]
  public string FirstName { get; set; }

# At line 135 of Register.cshtml.cs, need to propagate first name
 if (_userManager.Options.SignIn.RequireConfirmedAccount)
                    {
                        return RedirectToPage("RegisterConfirmation", new { email = Input.Email,firstName = Input.FirstName, returnUrl = returnUrl });
                    }


# Register.cshtml add the corresponding First Name field
  <div class="form-floating">
      <input asp-for="Input.FirstName" class="form-control" autocomplete="First-name" aria-required="true" />
      <label asp-for="Input.FirstName"></label>
      <span asp-validation-for="Input.FirstName" class="text-danger"></span>
  </div>
# RegisterConfirmation.cshtml add the confirmation message
else
    {
<p>
        We're really happy to have you  @Model.FirstName. <br>
        Please check your email to confirm your account
</p>
    }
# //  Use @Html.Raw(@Model.FirstName) to by pass XSS protection
# Replace entire RegisterConfirmation.cshtml.cs from (6/end)

########
# SERVER SIDE CHECK FOR BYPASS
##########
# Run end/6 (only) locally in visual studio code, do a Register, Start Fiddler, Use Rules > Automatic Breakpoints > Before Request, Put in Code Breakpoint at Register.cshtml.cs line 109 (check isModelValid), Use Fiddler to intercept form and put invalid data (with HTML)in form, verify that serverside isModel check prevents hack. (debug and at breakpoint inspect ModelState > FirstName
###############

###############
# ASVS 5.1.5 URL REDIRECTS
###############
# Type in /admin/user without being logged in. You are redirect to login, but login contains ReturnUrl exposed in the URI. We can tamper this with another URL to a similar login page but on an attacker site.
# To see the attack in place, at Login.chtmls.cs line 123 replace LocalRedirect with Redirect, then put it back in place
if (result.Succeeded)
                {
                    _logger.LogInformation("User logged in.");
                    return LocalRedirect(returnUrl);   // Redirect(returnUrl)
                }
# We can also add a check on the query parameter
# if (ModelState.IsValid)
#            {
                if (!Url.IsLocalUrl(returnUrl))
                {
                    ModelState.AddModelError(string.Empty, "Invalid return URL");
                    return Page();
                }

#################
# ENCODING OUTPUT (SANITIZE SYNTAX) HttpUtility.HtmlEncode , UrlEncode, JavaScriptStringEncode...
##################
# < &lt;  > &gt; & &amp; ......
# To demonstrate an example of XSS, remove regex check on FirstName in Register.cshtml.cs
# In RegisterConfirmation.cshtml use @Html.Raw(@Model.FirstName)
# Do a Registration with some HTML scripting <script>document.body.style.color="blue"</script>
# Put it without raw to see Razor doing html encoding OOTB

# Another example to use encoding (tags in a generated email): 
# Copy Areas>Admin>Controller>UserController.cs UserController.cs from 6/end
# Copy Areas>Admin>Views>User ViewUser.cshtml from 6/end
# Areas>Admin>Controller>UserController.cs line 14 Email Body
# Line 79 activate/deactivate encoding
string htmlMessage = EmailBody
                .Replace("%%message%%", HttpUtility.HtmlEncode(message));
# Go to Admin/User, select a User, new window with send message option
# Send a message hello <script>alert('hello')</script>, see in the log that html is or is not encoded

###################
# ASVS 5.3 INJECTION PREVENTION
###################
# ASVS 5.3.4 SQL INJECTION
# Copy Controllers>SurveyController.cs from 7/start
# Controllers>SurveyController.cs LINQ expression on line 73 is safe (parametrized) .Include(x => x.Questions).FirstOrDefault(x => x.Id == id);
# Line 27 unsafe, if query made by string concatenation like this:
                Console.WriteLine("****MessageAdo");
                command.CommandText = 
                    //"Select SurveyCompleteMessage from CustomerSurveys where id = @id";
                    "Select SurveyCompleteMessage from CustomerSurveys where id = '"+id.ToUpper()+"'";
                    //command.Parameters.Add(new SqliteParameter("@id", id.ToUpper()));
# Add Views>Survey>SurveyCompleteMessage.cshtml from 6/start
# Copy GloboSurvey.db from 6/end into project (you need an additional line in table CustomerSurvey to prove injection
# Replace CompleteSurvey Redirect line 86 to Ado to use the method with improper injectable statement
return Redirect("Survey/SurveyCompleteMessageAdo/" + id);
# Replace the correct with query parameters, with the injectable one, 
# Login, DO NOT go to /Survey/TakeSurvey/8f8afc29-228d-4508-9f7a-7d17c4ae9900, try to perform a Survey, (won't work before of UNIQUE constraint)
# Go directly to Survey/SurveyCompleteMessageAdo/8f8afc29-228d-4508-9f7a-7d17c4ae9900
# then altering URL in CompleteMessageAdo like this:
 Survey/SurveyCompleteMessageAdo/8f8afc29-228d-4508-9f7a-7d17c4ae9900'  <--- add a quote, error, uncovers injection vulnerability
# SqliteException: ******SQLite Error 1*******: 'unrecognized token: "'8F8AFC29-228D-4508-9F7A-7D17C4AE9900''"'.
# Try this:
 Survey/SurveyCompleteMessageAdo/8f8afc29-228d-4508-9f7a-7d17c4ae9900' or 1=1 --
# You see two lines from the CustomerSurvey table, show tables by using https://sqliteviewer.app/ and loading the GloboSurvey.db table (download from project and upload in page)

########################
# OS COMMAND INJECTION ASVS 5.3.8
########################
# Compare in 6/start with 6/end in Areas>Admin>Controllers>SurveyController copy over method SurveyReport
# in  6/end in Areas>Admin>Controllers>SurveyController place back unsecure code of 6/start, comment the secure part
# chmod ugo+x runreport.sh in 6/end (to execute it)
[HttpPost("Admin/SurveyReport")]
public IActionResult SurveyReport([FromForm] string surveyName)
{
    #string cmdText = @"/c C:\ps\RunReport.bat â€“name " + surveyName;
    string cmdText = @" --name " + surveyName;   # LINUX VERSION iF YOU USE GITPOD

    var p = new Process();
    #p.StartInfo.FileName = "cmd.exe";
    p.StartInfo.FileName = "./runreport.sh"; # LINUX VERSION iF YOU USE GITPOD
    p.StartInfo.Arguments = cmdText;
    p.Start();
    p.WaitForExit();

    return Redirect("/Admin/Surveys");
}
# You can run from 6/end dotnet run , but copy GloboSurveyUser.cs in Areas>Admin>Identity>Data from 7/start/Aread/Admin/Data/ if not there
# Login as Admin@globomantics.com, go to /Admin/Surveys
# Press "Print Report" button, but first use Fiddler to intercept request (Rules>Automatic Breakpoints>Before Requests), append "& mkdir xxx" as an OS injection example
# You can use Fiddler also with codeshare, just allow unsecure certificate (need Options > HTTPS > Caputre HTTPS connect, Decrypt HTTPS traffic from browsers only

################
# INSECURE DESERIALIZATION ASVS 5.5
################















<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE example [<!ELEMENT example ANY><!ENTITY file SYSTEM "file:///c:/ps/appsettings.json">]><example>&file;</example>
