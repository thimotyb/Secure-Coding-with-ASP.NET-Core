##########
# [Time 3:03] SECURE ERROR HANDLING AND LOGGING ASVS Chapter 7
# ASVS 7.1 Log Content (7.1.3), 7.2 Log Processing, 7.4 Error Handling
# INITIAL FIXING
###########
cd /workspace/Secure-Coding-with-ASP.NET-Core/.NetCore8/Modules/8/start/WebApplication1
# Change dbname and in appSettingsDevelopment.json to GloboIdentity.db
# Change extensions .cs to .bak in Migrations
# Rename all additional Migrations in Migrations/GlobomanticsSuerveyDb
cd Migrations/GlobomanticsSurveyDb/
for file in *.cs; do mv -- "$file" "${file%.cs}.bak"; done
# You should compile now
dotnet run

##############
# LOGGING SENSITIVE INFORMATION / EF LOGGING
###############
# Try Change DOB in your profile, EF Logging logs everything and all profile data (see in console), because
# in Program.cs in both DB Context there is dbContextoptions.EnableSensitiveDataLogging();
# Microsoft.EntityFrameworkCore.Database.Command[20101]
#      Executed DbCommand (0ms) [Parameters=[@p16='8f8afc29-228d-4508-9f7a-7d17c4ae9901' (Nullable = false) (Size = 36), @p0='0', @p1='7194ef34-59de-4096-9959-fd37ff8bf77c' (Size = 36), @p17='0fdd480e-63d8-458c-834a-8453928203c7' (Size = 36), @p2='1999-02-01T00:00:00.0000000' (DbType = DateTime), @p3='Admin@globomantics.com' (Size = 22), @p4='True', @p5='False', @p6=NULL (DbType = DateTimeOffset), @p7='Globo Admin' (Size = 11), @p8='ADMIN@GLOBOMANTICS.COM' (Size = 22), @p9='ADMIN@GLOBOMANTICS.COM' (Size = 22), @p10='AQAAAAIAAYagAAAAELqNPlA9xsFSl2OPilUr7Of0ONkFT8R6o1d0lYS86vylP3l3nYERtPmsO9feKN8kXg==' (S

# Remove dbContextoptions.EnableSensitiveDataLogging(); in Program.cs, lines 34/42, rerun, change date again, senstivie data is masked in logging

############
# HASHING SENSITIVE INFO IN LOGGING
############
# In Areas>Identity>Pages>Account>Login.cshtml.cs line 133 we want to log the user has logged in, with some info, hashing personal info
# Override ToString for the User entity in LoginModel in the same file (after line 85)
using System.Security.Cryptography;
using System.Text;

#            public bool RememberMe { get; set; }

            public override string ToString()
            {
                using (var algorithm = SHA512.Create())
                {
                    string emailHash = BitConverter.ToString(
                            algorithm.ComputeHash(Encoding.UTF8.GetBytes(Email))
                        ).Replace("-","");
                    return "Email: " + emailHash + 
                        " RememberMe: " + RememberMe;
                }
            }
# Replace line 145 with the User log with this:
 _logger.LogInformation("User logged in: {LoginData}.", Input);

# Rerun, login, in console:       User logged in: Email: 798C222E3DFDE77041FE696CD1793CEE7ECD5541269412975F9B6E1901CABB08A248D02C6691603CD09250CC56DB3B3F9034557B10C1BA3104DD3E65A17A84C1 RememberMe: False.

################Ã 
# ADDING LOG TO ADMIN EVENTS AND SERVERSIDE VALIDATION FAILURES (SHOULDNT HAPPEN BY USER, ONLY ATTACKERS/GUI BYPASSERS)
#################
# In appsettings.Development.json modify:
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "Microsoft.EntityFrameworkCore.Database.Command": "Warning"
    }
  },
# Look in Login.cs, some logs are LogWarning already created by scaffolding (e.g. user lockout)
# Add for invalid login a log warning:
_logger.LogWarning("Invalid login attempt: {LoginData}.", Input);
# In 8/end Admin>Controllers>UserController.cs show how logger is added in injection (field+contructor) and then add
# all elevation of privilege events (Set/Unset ADmin) (e.g. line 54)

########################
# LOGGING INPUT VALIDATION
########################
# Check all Inputs that get tampered in-between with a ModelStateValidationFilter
# In Program.cs add (line 14)
builder.Services.AddControllersWithViews(config =>
    {
        config.Filters.Add<ModelStateValidationFilter>();
    }
);

# Create ActionFilters folder and copy the filter code in it from 8/end ActionFilters
# We need to use Fiddler on Gitpod, disable HSTS in Program.cs and work back on HTTP port
//app.UseHsts();
//app.UseHttpsRedirection();
# Go to /Survey/TakeSurvey/8f8afc29-228d-4508-9f7a-7d17c4ae9900
# Before submit start in Fiddler do Rules>Automatic Breakpoints>Before Requests
# Use fiddler to intercept, bump up all surveys ID (last digit 5>) change Answer 1 Less than a year>
# In console you get
warn: ModelStateValidationFilter[0]
      Input validation failure: Path: /Survey/CompleteSurvey/8f8afc29-228d-4508-9f7a-7d17c4ae9900 Key: questions[0].Answer input: Less than 1 year>









