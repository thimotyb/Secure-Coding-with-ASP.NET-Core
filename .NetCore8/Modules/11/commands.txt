########################
# HANDLING UNTRUSTED FILES [4:25:00]
# Dealing with files intented to exhaust resources
# ASVS Chapt 12 Files and Resources. 12.1 File Upload, 12.3 File Execution, 12.4 File Storage, 12.5 File Download, 12.6 SSRF Protection Server requests driven by user input
# .NET Buffering with IFormFile (uses memory)
# .NET Streaming store without impact memory straight to disk (for bigger files)
# Check max upload size; use dedicated (cloud) storage for files (separate)
# File Name checks; Path Traversal (../); avoid IDOR, store the filename with a completely different randomly generated filename
# Use file extension allow list; check file byte signature to avoid user renames extension
# Scan uploaded file for viruses
# Check folder permission where uploads are stored
##########################

#####################
# PREVENT LARGE FILE UPLOAD
#######################
# Go to 11/start, do dotnet run, should compile straight away
# Login Admin@globomantics.com/Admin@globomantics.com
# Browse to /admin/FileUpload
# Try to upload smth > 30 MB (This is the default limit in Kestrel)
# Setting at project level: appsettings.json "MaxFileSize": 102400
  "ConnectionStrings": {
    "SurveyDbConnectionString": "Data Source=GloboSurvey.db",
    "IdentityDbContextConnection": "Data Source=Globomantics.Survey.db"
  },
  "MaxFileSize": 102400
}
# In Areas>Admin>Controllers>FileUploadController.cs, add to the constructor:
private readonly long MaxFileSizeBytes = 0; // (in the class fields)
...
MaxFileSizeBytes = Convert.ToInt64(Configuration["MaxFileSize"]); // (inside the constructor)
# In FileUploadAsync method add logic for validation of the size
if (uploadFile.Length > MaxFileSizeBytes)
  {
      ModelState.AddModelError("File", string.Format("The file is too large. It cannot be above {0} bytes", MaxFileSizeBytes));
      return View("Index");    
  }
# Run and try to upload something around 400K

### SETTING SIZE GLOBALLY AT FORM LEVEL
# In Program.cs add a Configure for FormOptions
using Microsoft.AspNetCore.Http.Features;
...
builder.Services.Configure<FormOptions>(options =>
{
    options.MultipartBodyLengthLimit = Convert.ToInt64(builder.Configuration["MaxFileSize"]);
});

####################à
# USING AN ANTIVIRUS TO SCAN FILE UPLOADS PROGRAMMATICALLY
#####################
# EICAR files contains files with patterns to trigger AVs for testing at eicar.org
# Create a malware-test.txt file with this string
X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*
# Setup conf settings in appsettings.json
  "MaxFileSize": 102400,
  "AntiVirus": {
    "Host": "localhost",
    "Port": 3310
  }
}
# In Admin>Controllers>FileUploadController.cs inject these properties into constructor
        private readonly string AntiVirusHost = ""; //(in fields)
        private readonly int AntiVirusPort = 0;
...
            AntiVirusHost = Configuration["AntiVirus:Host"]; //(in constructor)
            AntiVirusPort = Convert.ToInt32(Configuration["AntiVirus:Port"]);
# Add Clam package
dotnet add package nClam
# In FileUploadController.cs, add VirusScan method (copy it from 11/end)
using nClam;
...
     private async Task<ClamScanResult> VirusScan(IFormFile uploadFile)
        {
            var clam = new ClamClient(AntiVirusHost, AntiVirusPort);

            var memoryStream = new MemoryStream();  
            uploadFile.OpenReadStream().CopyTo(memoryStream);  
            byte[] fileBytes = memoryStream.ToArray(); 

            return await clam.SendAndScanFileAsync(fileBytes); 
        }
# In FileUploadController,cs in the FileUploadAsync method add the call to this method (line 45)
var scanResult = await VirusScan(uploadFile);

            switch (scanResult.Result)  
            {  
                case ClamScanResults.Clean:  
                    await SaveFile(uploadFile);
                    break;
                case ClamScanResults.VirusDetected:  
                    ModelState.AddModelError("File", "The file contains a virus!");
                    break;  
                default:  
                    ModelState.AddModelError("File", "An error was encountered while scanning the file");
                    break;  
            }  

# Run the antivirus in dockerized version
docker run -d --publish 3310:3310 clamav/clamav:latest
# Create the "Uploads" folder in project root
# Now login and upload the malware test file. Your antivirus will delete the file if you use local PC to connect
# Use lynx from inside a new Gitpod.io terminal to login locally (starting from inside the folder of the project), perform login to https://localhost:7236 then go (G option) to https://localhost:7236/Admin/FileUpload and upload
./malware-test.txt
# Submit in lynx and you will see error "The file contains a virus!"
# Answer "y" every time it complains for the certificate

#################
# FILE STORAGE AND PATH TRAVERSAL PROTECTION
# we assign random name to uploaded file and store in folder external to the application
#################
# Now Uploads folder is inside solution tree
# To use Fiddler, it may be necessary to uncomment HSTS in the pipeline in Program.cs, go on the HTTP port
# Try to upload (upload a small file, 40K), intercept with Fiddler, and in Fiddler go to raw mode, search the filename param in WebkitFormBoundary, change the name to ../<filename>, you will see the upload happening from outside the Uploads folder --> danger
# To Circumvent this, we rename the file using the specific upload path. In SaveFile in FileUploadController.cs, replace the method with
private async Task SaveFile(IFormFile uploadFile)
        {
            var filePath = UploadPath + Path.GetRandomFileName();

            using (var stream = System.IO.File.Create(filePath))
            {
                await uploadFile.CopyToAsync(stream);
            }            
        }
# This would additionally need a new table to store the original filename, original owner, date of upload, etc.
# Also good idea to change UploadPath at line 63 to a path outside the application (better different disk even)

##############à
# VALIDATING FILE TYPES BY EXTENSIONS AND TYPE SIGNATURES
# List of Type signatures: https://en.wikipedia.org/wiki/List_of_file_signatures
###############
# Add Services>FileValidationServices.cs from 11/end
# In FileUploadController.cs, add the Validation Service (inject as field and in constructor, change constructor signature)
using Globomantics.Survey.Services;
...
private readonly FileValidationService _fileValidationService; // as field
...
  public FileUploadController(IConfiguration configuration,
      FileValidationService fileValidationService)
  {
      Configuration = configuration;
      _fileValidationService = fileValidationService;
...
# Add validation before the Virus Scan call (ca. line 49)
  if (!_fileValidationService.IsValid(uploadFile))
  {
      ModelState.AddModelError("File", string.Format("File type is invalid"));
      return View("Index"); 
  }
# In Program.cs we add the class in the Dependency Injection
builder.Services.AddTransient<FileValidationService>();
# https://stackoverflow.com/questions/38138100/addtransient-addscoped-and-addsingleton-services-differences
# Transient objects are always different; a new instance is provided to every controller and every service.
# Scoped objects are the same within a request, but different across different requests.
# Singleton objects are the same for every object and every request.
# Load go to file upload, try to upload a .txt file, then create a .txt file and rename it to .png, it will still not work, try a real png









