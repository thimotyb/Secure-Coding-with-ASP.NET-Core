#######################################
# API SECURITY [05:00:54]
# - Bearer Tokens
# - API specific headers
# - API misconfig
# ASVS 13
# 13.1 Generic Web Service Security
# 13.2 REST services
# 13.3 SOAP Web Services
# 14.5.3 CORS Headers
# 13.5 Token based session management
# ASVS promotes bearer tokens and discontinues API keys (fixed value as password)
#######################################
# CORS AND APIs
# SAME ORIGIN POLICY
#  User ---> Browser ---> WebApp (JS) https//example.com ---> API (hosted on same site as web app) example.com/api   
#  User ---> Browser ---> WebApp (JS) https//another.example.com ---> API (hosted on same site as web app) example.com/api  --> another.example.com is NOT SAME ORIGIN, when response comes back from API the browser that displays web app will not allow the page to access the data in the response
# CORS allows to specify which origins are allowed (eg. include another.example.com as possible origin of the API call) Access-Control-Allow-Origin
# Access-Control-Allow-Credential allows cookies to be attached to request
########################################

#####################
# AUTHENTICATED API WITH BEARER TOKEN
########################
# There are 2 projects here, the WebApi folder contains the API, the WebApp contains the GUI Web App Frontend
cd /workspace/Secure-Coding-with-ASP.NET-Core/.NetCore8/Modules/13/start/WebApi/GlobomanticsApi
# Install JWT package
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
# Configure in Program.cs, add at line 6
using System.Text;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
...
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters()
        {
            ValidateAudience = true,
            ValidateIssuer = true,
            ValidAudience = builder.Configuration["Authentication:Audience"],
            ValidIssuer = builder.Configuration["Authentication:Issuer"],
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(builder.Configuration["Authentication:SecretKey"]))
        };
    });
# Also add CORS config we will use later (line 20)
string AllowAllHostsPolicy = "AllowAllHostsPolicy";

builder.Services.AddCors(options => 
    options.AddPolicy(AllowAllHostsPolicy, policy =>
        {
            policy.WithOrigins("https://localhost:7236")
                .AllowAnyMethod()
                .AllowAnyHeader()
                .AllowCredentials();
        }));
# Use the 2 middlewares
app.UseCors(AllowAllHostsPolicy);
...
app.UseAuthentication();
app.UseAuthorization();
# Set in appsettings.json the config values used to configure token
"Authentication": {
    "SecretKey": "2JxAf79DPsHhyPDX7ZEx5mcRE9xNNg5Z5vx9wsc2hwBc22WfmBvAYynMLZsDMVHW(DO NOT USE THIS KEY!!)",
    "Issuer": "GlobomanticsApi",
    "Audience": "survey.Globomantics",
    "Subject": "GloboAccessToken"
  }
# In Controllers>SurveyStatsController.cs add Authorize decoration
using Microsoft.AspNetCore.Authorization;
...
[Authorize]
[HttpGet.....]

# To get a Token we need an Authorization Service (KeyCloak, OKTA...), here we will create a Token Controller to simulate this
# Paste TokenController.cs from end/WebApi/ClobomanticsApi/Controllers into corresponding location in start
# Paste the LoginModel this contorller is using from end/WebApi/ClobomanticsApi/Models/LoginModel.cs in corresponding location in start
# We are going to use external browser to gitpod service, so we need to replace localhost with current gitpod instance hostname
# API has to be exposed in https from gitpod, add to gitpod.yaml in ports (or right click in Ports on URL of 7070 and choose USE HTTPS Protocol)
    - name: API Application
      port: 7070
      protocol: https
# Open a new terminal, go to 
cd /workspace/Secure-Coding-with-ASP.NET-Core/.NetCore8/Modules/13/start/WebApi/GlobomanticsApi
dotnet run
# make public port 7070 in gitpod and set it to HTTPS (right click on URL).
# Take API gitpod address, e.g. https://7070-thimotyb-securecodingwi-bq2emtlu85v.ws-eu114.gitpod.io/
# In start/WebApp/Controllers/ApiDataController.cs replace localhost:7070 with gitpod hostname
# Replace localhost:7070 also in wwwroot/js/api.js at line 28 and 38
# # In Views>Shared>_Layout.cshtml, if you do not have correct integrity check disable it for jquery, drop the integrity attribute
#    <script src="~/lib/jquery/dist/jquery.min.js"
#        integrity="sha384-I9nvsY534/cx2CBx9qnDDuNkP4tBw4Va7eW8+2CXSaiPmfhB42fq032++kvT8woz" crossorigin="anonymous"></script>
# CHECK SECURITY IN PLACE, IF USE GITPOD PROBLEMS BECAUSE OF CROSS-SITE INVOCATION

# Navigate to <gitpodhost>:7236/apidata
# Open INspect tool, go to Sources, open js/api.js set a breakpoint on line 6 to see what javascript does
# In Console, several errors, first because of CSP, then because of CORS

# In Program.cs of WebApp, line 195, relax CSP to allow cross-site script invokation, delete 'connect-src 'self';' and default-src 'none';
#  context.Response.Headers[HeaderNames.ContentSecurityPolicy] = 
        "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'self'; form-action 'self';";
# In Program.cs of WebApp, disable strict CORS by commenting  context.Response.Headers.Add("Referrer-Policy", "strict-origin-when-cross-origin");
# In Program.cs of WebAPI, set CORS change to Allow from AnyOrigin without credentials
builder.Services.AddCors(options => 
    options.AddPolicy(AllowAllHostsPolicy, policy =>
        {
            policy.AllowAnyOrigin()
                .AllowAnyMethod()
                .AllowAnyHeader();
                
        }));
# In another terminal, run webapp
cd /workspace/Secure-Coding-with-ASP.NET-Core/.NetCore8/Modules/13/start/WebApp
dotnet run
# Navigate to <gitpodhost>:7236/apidata
# Open INspect tool, go to Sources, open js/api.js set a breakpoint on line 6 to see what javascript does
# Go on with debugger, see that token is released and the API is invoked and returns a json with number of surveys

############à
# CORS
############àà
builder.Services.AddCors(options => 
    options.AddPolicy(AllowAllHostsPolicy, policy =>
        {
            policy.WithOrigins("*")
                .AllowAnyMethod()
                .AllowAnyHeader();
                //.AllowCredentials();
                
        }));


TODO RECHECK THIS EXERCISE AS IT GIVES IN DEBUG: Access to XMLHttpRequest at 'https://7070-thimotyb-securecodingwi-det6c78pdku.ws-eu114.gitpod.io/login' from origin 'https://7236-thimotyb-securecodingwi-det6c78pdku.ws-eu114.gitpod.io' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.
STRANGE IT WORKED IN THE FIRST TRIAL, CHECK WHAT HAPPENED


